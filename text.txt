CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                first_name TEXT NOT NULL,
                last_name TEXT NOT NULL,
                user_name TEXT NOT NULL,
                hash TEXT NOT NULL,
                profile_pic TEXT NOT NULL
              );

CREATE UNIQUE INDEX user_name ON users (user_name);  

CREATE TABLE watched (
                id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                movie_title TEXT NOT NULL,
                movie_year TEXT NOT NULL,
                movie_stars TEXT NOT NULL,
                movie_poster TEXT NOT NULL,
                movie_poster_sizes TEXT NOT NULL,
                movie_poster_set TEXT NOT NULL,
                movie_watched_date TEXT,
                user_id INTEGER NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id)
              );

CREATE TABLE watchlist (
                id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                movie_title TEXT NOT NULL,
                movie_year TEXT NOT NULL,
                movie_stars TEXT NOT NULL,
                movie_poster TEXT NOT NULL,
                movie_poster_sizes TEXT NOT NULL,
                movie_poster_set TEXT NOT NULL,
                user_id INTEGER NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id)
              ); 

CREATE TABLE movie_buddies (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  buddy_request_sender INTEGER NOT NULL,
  buddy_request_recipient INTEGER NOT NULL,
  buddy_status TEXT NOT NULL,
  FOREIGN KEY (buddy_request_sender) REFERENCES users(id),
  FOREIGN KEY (buddy_request_recipient) REFERENCES users(id)
);                 

CREATE TABLE moviebuddy_request (
  request_sender INTEGER NOT NULL,
  request_recipient INTEGER NOT NULL,
  FOREIGN KEY (request_sender) REFERENCES users(id),
  FOREIGN KEY (request_recipient) REFERENCES users(id)
); 

CREATE TABLE recommendations (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  movie_title TEXT NOT NULL,
  movie_year TEXT NOT NULL,
  movie_stars TEXT NOT NULL,
  movie_poster TEXT NOT NULL,
  movie_poster_sizes TEXT NOT NULL,
  movie_poster_set TEXT NOT NULL,
  recommender INTEGER NOT NULL,
  recommendie INTEGER NOT NULL,
  FOREIGN KEY (recommender) REFERENCES users(id),
  FOREIGN KEY (recommendie) REFERENCES users(id)
);

CREATE TABLE chat_messages (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  date_time TEXT NOT NULL,
  message TEXT NOT NULL,
  msg_sender INTEGER NOT NULL,
  msg_recipient INTEGER NOT NULL,
  FOREIGN KEY (msg_sender) REFERENCES users(id),
  FOREIGN KEY (msg_recipient) REFERENCES users(id) 
);


SELECT users.id, first_name, last_name, user_name, profile_pic,buddy_request_sender, buddy_request_recipient
FROM users 
JOIN movie_buddies ON users.id = movie_buddies.id
WHERE buddy_status = "Movie Buddies";

SELECT users.id, first_name, last_name, user_name, profile_pic, recommendations.id, movie_title, movie_year, movie_stars, movie_poster, movie_poster_sizes, movie_poster_set
FROM users
JOIN recommendations ON users.id = recommender
WHERE recommendie = 2;

SELECT users.id, first_name, last_name, user_name, profile_pic FROM users JOIN movie_buddies ON users.id = movie_buddies.buddy_request_sender WHERE (buddy_request_sender = 1 OR buddy_request_recipient = 1) AND buddy_status = "Movie Buddies" AND users.id!= 1 UNION SELECT users.id, first_name, last_name, user_name, profile_pic FROM users JOIN movie_buddies ON users.id = movie_buddies.buddy_request_recipient WHERE (buddy_request_sender = 1 OR buddy_request_recipient = 1) AND buddy_status = "Movie Buddies" AND users.id!= 1;

SELECT buddy_request_sender, buddy_request_recipient FROM movie_buddies WHERE (buddy_request_sender = 1 OR buddy_request_recipient = 1) AND buddy_status = "Movie Buddies";


CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                first_name TEXT NOT NULL,
                last_name TEXT NOT NULL,
                user_name TEXT NOT NULL,
                hash TEXT NOT NULL,
                profile_pic TEXT NOT NULL
              );

CREATE UNIQUE INDEX user_name ON users (user_name);  

CREATE TABLE watched (
                id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                movie_title TEXT NOT NULL,
                movie_year TEXT NOT NULL,
                movie_stars TEXT NOT NULL,
                movie_poster TEXT NOT NULL,
                movie_poster_sizes TEXT NOT NULL,
                movie_poster_set TEXT NOT NULL,
                movie_watched_date TEXT,
                user_id INTEGER NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id)
              );

CREATE TABLE watchlist (
                id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                movie_title TEXT NOT NULL,
                movie_year TEXT NOT NULL,
                movie_stars TEXT NOT NULL,
                movie_poster TEXT NOT NULL,
                movie_poster_sizes TEXT NOT NULL,
                movie_poster_set TEXT NOT NULL,
                user_id INTEGER NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id)
              ); 

CREATE TABLE movie_buddies (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  buddy_request_sender INTEGER NOT NULL,
  buddy_request_recipient INTEGER NOT NULL,
  buddy_status TEXT NOT NULL,
  FOREIGN KEY (buddy_request_sender) REFERENCES users(id),
  FOREIGN KEY (buddy_request_recipient) REFERENCES users(id)
);                 

CREATE TABLE moviebuddy_request (
  request_sender INTEGER NOT NULL,
  request_recipient INTEGER NOT NULL,
  FOREIGN KEY (request_sender) REFERENCES users(id),
  FOREIGN KEY (request_recipient) REFERENCES users(id)
); 

CREATE TABLE recommendations (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  movie_title TEXT NOT NULL,
  movie_year TEXT NOT NULL,
  movie_stars TEXT NOT NULL,
  movie_poster TEXT NOT NULL,
  movie_poster_sizes TEXT NOT NULL,
  movie_poster_set TEXT NOT NULL,
  recommender INTEGER NOT NULL,
  recommendie INTEGER NOT NULL,
  FOREIGN KEY (recommender) REFERENCES users(id),
  FOREIGN KEY (recommendie) REFERENCES users(id)
);

CREATE TABLE chat_messages (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  date TEXT NOT NULL,
  time TEXT NOT NULL,
  time_zone TEXT NOT NULL,
  utc_timestamp TEXT NOT NULL,
  timezone_offset TEXT NOT NULL,
  message TEXT NOT NULL,
  msg_sender INTEGER NOT NULL,
  msg_recipient INTEGER NOT NULL,
  FOREIGN KEY (msg_sender) REFERENCES users(id),
  FOREIGN KEY (msg_recipient) REFERENCES users(id) 
);


SELECT users.id, first_name, last_name, user_name, profile_pic,buddy_request_sender, buddy_request_recipient
FROM users 
JOIN movie_buddies ON users.id = movie_buddies.id
WHERE buddy_status = "Movie Buddies";

SELECT users.id, first_name, last_name, user_name, profile_pic, recommendations.id, movie_title, movie_year, movie_stars, movie_poster, movie_poster_sizes, movie_poster_set
FROM users
JOIN recommendations ON users.id = recommender
WHERE recommendie = 2;

SELECT users.id, first_name, last_name, user_name, profile_pic FROM users JOIN movie_buddies ON users.id = movie_buddies.buddy_request_sender WHERE (buddy_request_sender = 1 OR buddy_request_recipient = 1) AND buddy_status = "Movie Buddies" AND users.id!= 1 UNION SELECT users.id, first_name, last_name, user_name, profile_pic FROM users JOIN movie_buddies ON users.id = movie_buddies.buddy_request_recipient WHERE (buddy_request_sender = 1 OR buddy_request_recipient = 1) AND buddy_status = "Movie Buddies" AND users.id!= 1;

SELECT buddy_request_sender, buddy_request_recipient FROM movie_buddies WHERE (buddy_request_sender = 1 OR buddy_request_recipient = 1) AND buddy_status = "Movie Buddies";

SELECT users.id, first_name, last_name, user_name, profile_pic, chat_messages.id, date_time, message
FROM users
JOIN chat_messages ON users.id = msg_recipient
WHERE msg_sender = 1;

SELECT DISTINCT users.id, first_name, last_name, user_name, profile_pic
FROM users
JOIN chat_messages ON users.id = chat_messages.msg_sender
WHERE msg_recipient = 1

UNION

SELECT DISTINCT users.id, first_name, last_name, user_name, profile_pic
FROM users
JOIN chat_messages ON users.id = chat_messages.msg_recipient
WHERE msg_sender = 1;

SELECT DISTINCT users.id, first_name, last_name, user_name, profile_pic FROM users JOIN chat_messages ON users.id = chat_messages.msg_sender WHERE msg_recipient = ? UNION SELECT DISTINCT users.id, first_name, last_name, user_name, profile_pic FROM users JOIN chat_messages ON users.id = chat_messages.msg_recipient WHERE msg_sender = ?;

SELECT users.id, first_name, last_name, user_name, profile_pic
FROM users
JOIN chat_messages ON users.id = chat_messages.msg_sender
WHERE msg_recipient = 1

UNION

SELECT date_time, message FROM chat_messages WHERE msg_sender = 1 AND msg_recipient = 2 UNION SELECT date_time, message FROM chat_messages WHERE msg_sender = 2 AND msg_recipient = 1;


SELECT DISTINCT users.id, first_name, last_name, user_name, profile_pic FROM users JOIN ( SELECT msg_sender AS user_id, MAX(date || ' ' || time) AS latest_message FROM chat_messages WHERE msg_recipient = ? GROUP BY msg_sender UNION SELECT msg_recipient AS user_id, MAX(date || ' ' || time) AS latest_message FROM chat_messages WHERE msg_sender = ? GROUP BY msg_recipient ) AS latest_messages ON users.id = latest_messages.user_id ORDER BY latest_messages.latest_message DESC;

if (event.target.id == 'upload-profile-pic') {
                    event.preventDefault()

                     console.log("upload-profile-pic-btn-clicked")
                    let upload = document.getElementById('upload-profile-pic-form');
                    console.log(upload)
                    upload.style.display = "block";
                } 
                
                if (event.target.id == 'remove-profile-pic')
                    event.preventDefault()

                    let data = {
                        id: document.getElementById("user-profile-pic-id").innerText
                    }
                    console.log(data)

                    // Send data to server 
                    fetch("/remove_profile_pic", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    })
                    .then(response=> response.json())
                    .then(data => {
                        alert(data.message);
                        visible_div.style.display = "none";
                        let hidden_profile_pic = document.getElementById("default-profile-pic-div");
                        hidden_profile_pic.style.display = "none";
                        let visible_profile_pic = document.getElementById("removed-profile-pic");
                        visible_profile_pic.style.display = "block";
                    })
                    .catch((error) => console.error('Error:',error)); 

